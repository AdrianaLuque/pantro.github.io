{"version":3,"sources":["components/auth/Login.js","components/map/LocateControl.js","components/map/MyMap.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","useState","username","password","usuario","guardarUsuario","onChange","e","target","name","value","Container","className","Col","md","span","offset","Form","onSubmit","preventDefault","console","log","trim","Group","controlId","Label","Control","type","placeholder","Button","variant","LocateControl","this","options","startDirectly","map","leaflet","lc","Locate","addTo","start","Component","withLeaflet","MyMap","Map","center","zoom","TileLayer","url","attribution","position","strings","title","onActivate","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qVAiGeA,EA1FD,SAACC,GAAU,MAuBaC,mBAAS,CACvCC,SAAU,GACVC,SAAU,KAzBO,mBAuBdC,EAvBc,KAuBLC,EAvBK,KA6BbH,EAAuBE,EAAvBF,SAAUC,EAAaC,EAAbD,SAEZG,EAAW,SAAAC,GACbF,EAAe,eACRD,EADO,eAETG,EAAEC,OAAOC,KAAQF,EAAEC,OAAOE,UAgBnC,OACI,kBAACC,EAAA,EAAD,CAAWC,UAAU,OACrB,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,GAAKJ,UAAU,eACvC,oDACA,kBAACK,EAAA,EAAD,CACIC,SAjBK,SAAAX,GACbA,EAAEY,iBACFC,QAAQC,IAAI,qBAEY,KAApBnB,EAASoB,QAAiBnB,EAASmB,SAe/B,kBAACL,EAAA,EAAKM,MAAN,CAAYC,UAAU,YAClB,kBAACP,EAAA,EAAKQ,MAAN,MACA,kBAACR,EAAA,EAAKS,QAAN,CACIC,KAAK,OACLlB,KAAK,WACLmB,YAAY,UACZlB,MAAOR,EACPI,SAAUA,KAGlB,kBAACW,EAAA,EAAKM,MAAN,CAAYC,UAAU,YAElB,kBAACP,EAAA,EAAKS,QAAN,CACIC,KAAK,WACLlB,KAAK,WACLmB,YAAY,gBACZlB,MAAOP,EACPG,SAAUA,KAGlB,kBAACuB,EAAA,EAAD,CAAQC,QAAQ,UAAUH,KAAK,UAA/B,c,yEChFVI,E,kLACiB,IAAD,EACiBC,KAAKhC,MAAhCiC,EADU,EACVA,QAASC,EADC,EACDA,cACTC,EAAQH,KAAKhC,MAAMoC,QAAnBD,IAEZf,QAAQC,IAAIW,KAAKhC,OAEb,IAAMqC,EAAK,IAAIC,IAAOL,GACtBI,EAAGE,MAAMJ,GAELD,GAEFG,EAAGG,U,+BAKL,OAAO,S,GAjBiBC,aAqBbC,cAAYX,GCEZY,E,uKAZX,OACE,kBAACC,EAAA,EAAD,CAAKC,OAAQb,KAAKhC,MAAM6C,OAAQC,KAAMd,KAAKhC,MAAM8C,MAC/C,kBAACC,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,2EAEd,kBAAC,EAAD,CAAehB,QAdG,CACpBiB,SAAU,WACVC,QAAS,CACLC,MAAO,2BAEXC,WAAY,cAS6BnB,eAAa,S,GAjBxCO,aCcLa,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW1D,IACjC,kBAAC,IAAD,CAAOwD,OAAK,EAACC,KAAK,OAAOC,UAAWd,OCAxBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.26e50134.chunk.js","sourcesContent":["import React, {useState, useContext, useEffect} from 'react';\nimport { Link } from 'react-router-dom';\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap';\n\n//import authContext from \"../../context/auth/authContext\";\n//import alertaContext from '../../context/alertas/alertaContext';\n\nconst Login = (props) => {\n  \n    //Extraer los valores del context\n    //const alertasContext = useContext(alertaContext);\n    //const { alerta, MostrarAlerta } = alertasContext;\n\n    //const authsContext = useContext(authContext);\n    //const { mensaje, autenticado, IniciarSesion } = authsContext;\n\n    //En caso de que el passwors o usuario no exista\n    /*useEffect(() => {\n        if (autenticado) {\n        props.history.push('/proyectos');\n        }\n        \n        if (mensaje) {\n        //MostrarAlerta(mensaje.msg, mensaje.categoria);\n        }\n        //Para evitar que mande error por que sabemos que esta bien\n        // eslint-disable-next-line\n    }, [mensaje, autenticado, props.history]);\n    */\n    //State para iniciar sesión\n    const [usuario, guardarUsuario] = useState({\n        username: '',\n        password: ''\n    });\n\n    //Extraer de usuario\n    const { username, password } = usuario;\n\n    const onChange = e => {\n        guardarUsuario({\n            ...usuario,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    const onSubmit = e => {\n        e.preventDefault();\n        console.log(\"se presiono boton\");\n        //Validar que no haya campos vacios\n        if (username.trim() === '' || password.trim() === '') {\n        //MostrarAlerta('Todos los campos son obligatorios', 'alerta-error');\n        }\n\n        //Pasarlo al action\n        //IniciarSesion({ username, password });\n    }\n\n    return (\n        <Container className=\"p-4\">\n        <Col md={{ span: 4, offset: 4 }} className=\"text-center\">\n            <h3>Vigilancia Integrada</h3>\n            <Form\n                onSubmit={onSubmit}\n            >\n                <Form.Group controlId=\"username\">\n                    <Form.Label ></Form.Label>\n                    <Form.Control \n                        type='text'\n                        name='username'\n                        placeholder='Usuario'\n                        value={username}\n                        onChange={onChange}\n                    />\n                </Form.Group>\n                <Form.Group controlId=\"password\">\n                    {/*<Form.Label ></Form.Label>*/}\n                    <Form.Control \n                        type='password'\n                        name='password'\n                        placeholder='Contraseña'\n                        value={password}\n                        onChange={onChange}\n                    />\n                </Form.Group>\n                <Button variant=\"primary\" type='submit'>\n                    Entrar\n                </Button>\n            </Form>\n\n            {/*<Link to={'/nueva-cuenta'} className='enlace-cuenta'>\n                Obtener Cuenta\n            </Link>*/}\n        </Col>\n        </Container >\n    );\n}\n\nexport default Login;","import { Component } from \"react\";\nimport { withLeaflet } from \"react-leaflet\";\nimport Locate from \"leaflet.locatecontrol\";\n\nclass LocateControl extends Component {\n  componentDidMount() {\n    const { options, startDirectly } = this.props;\n    const { map } = this.props.leaflet;\n\nconsole.log(this.props)\n\n    const lc = new Locate(options);\n    lc.addTo(map);\n\n    if (startDirectly) {\n      // request location update and set location\n      lc.start();\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default withLeaflet(LocateControl);","import React, { Component } from \"react\";\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport LocateControl from './LocateControl';\n\nclass MyMap extends Component {\n  \n  render() {\n    const locateOptions = {\n      position: 'topright',\n      strings: {\n          title: 'Mostrar mi ubicación'\n      },\n      onActivate: () => {} // callback before engine starts retrieving locations\n    }\n\n    return (\n      <Map center={this.props.center} zoom={this.props.zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        <LocateControl options={locateOptions} startDirectly/>\n      </Map>\n    );\n  }\n}\n\nexport default MyMap;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './App.css';\n\nimport Login from \"./components/auth/Login\";\nimport MyMap from \"./components/map/MyMap\";\n\nfunction App() {\n  return (\n    <Router> \n      <Switch>\n        <Route exact path=\"/\" component={Login}/>\n        <Route exact path=\"/map\" component={MyMap}/>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}